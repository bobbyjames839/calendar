    useEffect(() => {
        const fetchAndGenerateTimeSlots = async () => {
            setLoading(true);
    
            const startHour = 9;
            const endHour = 17;
            const noonHour = 12;
            const morningSlotsTemp = [];
            const afternoonSlotsTemp = [];
    
            // Fetch booked time slots for the selected employee on the selected day
            const bookingsRef = collection(db, 'bookings');
            const q = query(bookingsRef, where("date", "==", selectedDay.toDateString()), where("employee", "==", selectedEmployee.name));
            const querySnapshot = await getDocs(q);
    
            const bookedSlots = querySnapshot.docs.map(doc => {
                const data = doc.data();
                return { startTime: data.startTime, endTime: data.endTime };
            });
            console.log(bookedSlots)
    
            let currentTime = new Date(selectedDay.getFullYear(), selectedDay.getMonth(), selectedDay.getDate(), startHour, 0, 0, 0);
    
            while (true) {
                const endTime = new Date(currentTime);
                endTime.setMinutes(currentTime.getMinutes() + appointmentDuration);
    
                // Check if the end time exceeds 17:00 (or is exactly 17:00)
                if (endTime.getHours() > endHour || (endTime.getHours() === endHour && endTime.getMinutes() > 0)) {
                    break;
                }
    
                const hours = currentTime.getHours().toString().padStart(2, '0');
                const minutes = currentTime.getMinutes().toString().padStart(2, '0');
                const timeSlot = `${hours}:${minutes}`;
    
                // Convert the current time slot to a decimal format for comparison
                const currentTimeDecimal = timeMapping[timeSlot];
                const endTimeDecimal = currentTimeDecimal + appointmentDuration / 60;
    
                // Check if the current time slot overlaps with any booked slots
                const isBooked = bookedSlots.some(slot => 
                    (currentTimeDecimal < slot.endTime && endTimeDecimal > slot.startTime)
                );
    
                if (!isBooked) {
                    if (currentTime.getHours() < noonHour) {
                        morningSlotsTemp.push(timeSlot);
                    } else {
                        afternoonSlotsTemp.push(timeSlot);
                    }
                }
    
                currentTime.setMinutes(currentTime.getMinutes() + appointmentDuration);
            }
    
            setMorningSlots(morningSlotsTemp);
            setAfternoonSlots(afternoonSlotsTemp);
            setLoading(false);
        };
    
        fetchAndGenerateTimeSlots();
    }, [selectedDay, appointmentDuration, selectedEmployee]);









        
    useEffect(() => {
        const fetchAndGenerateTimeSlots = async () => {
            setLoading(true);
    
            const startHour = 9;
            const endHour = 17;
            const noonHour = 12;
            const morningSlotsTemp = [];
            const afternoonSlotsTemp = [];
    

            const bookingsRef = collection(db, 'bookings');
            let q;
            if (selectedEmployee.name === "Any Staff") {
                q = query(bookingsRef, where("date", "==", selectedDay.toDateString()));
            } else {
                q = query(bookingsRef, where("date", "==", selectedDay.toDateString()), where("employee", "==", selectedEmployee.name));
            }
            const querySnapshot = await getDocs(q);
    
            let bookedSlots = querySnapshot.docs.map(doc => {
                const data = doc.data();
                return { startTime: data.startTime, endTime: data.endTime };
            });
    
            if (selectedEmployee.name === "Any Staff") {

                const aggregatedSlots = {};
                bookedSlots.forEach(slot => {
                    for (let time = slot.startTime; time < slot.endTime; time += 0.25) {
                        if (!aggregatedSlots[time]) {
                            aggregatedSlots[time] = 0;
                        }
                        aggregatedSlots[time]++;
                    }
                });
    
                // Filter out time slots that are not fully booked by all employees
                bookedSlots = [];
                Object.keys(aggregatedSlots).forEach(time => {
                    if (aggregatedSlots[time] >= 4) { // Assuming 4 employees in total
                        bookedSlots.push({ startTime: parseFloat(time), endTime: parseFloat(time) + 0.25 });
                    }
                });
    
                // Merge consecutive booked slots
                if (bookedSlots.length > 0) {
                    const mergedSlots = [];
                    let currentSlot = bookedSlots[0];
    
                    for (let i = 1; i < bookedSlots.length; i++) {
                        if (currentSlot.endTime === bookedSlots[i].startTime) {
                            currentSlot.endTime = bookedSlots[i].endTime;
                        } else {
                            mergedSlots.push(currentSlot);
                            currentSlot = bookedSlots[i];
                        }
                    }
                    mergedSlots.push(currentSlot);
                    bookedSlots = mergedSlots;
                }
            }
    
            console.log(bookedSlots);
    
            let currentTime = new Date(selectedDay.getFullYear(), selectedDay.getMonth(), selectedDay.getDate(), startHour, 0, 0, 0);
    
            while (true) {
                const endTime = new Date(currentTime);
                endTime.setMinutes(currentTime.getMinutes() + appointmentDuration);
    
                // Check if the end time exceeds 17:00 (or is exactly 17:00)
                if (endTime.getHours() > endHour || (endTime.getHours() === endHour && endTime.getMinutes() > 0)) {
                    break;
                }
    
                const hours = currentTime.getHours().toString().padStart(2, '0');
                const minutes = currentTime.getMinutes().toString().padStart(2, '0');
                const timeSlot = `${hours}:${minutes}`;
    
                // Convert the current time slot to a decimal format for comparison
                const currentTimeDecimal = timeMapping[timeSlot];
                const endTimeDecimal = currentTimeDecimal + appointmentDuration / 60;
    
                // Check if the current time slot overlaps with any booked slots
                const isBooked = bookedSlots.some(slot => 
                    (currentTimeDecimal < slot.endTime && endTimeDecimal > slot.startTime)
                );
    
                if (!isBooked) {
                    if (currentTime.getHours() < noonHour) {
                        morningSlotsTemp.push(timeSlot);
                    } else {
                        afternoonSlotsTemp.push(timeSlot);
                    }
                }
    
                currentTime.setMinutes(currentTime.getMinutes() + appointmentDuration);
            }
    
            setMorningSlots(morningSlotsTemp);
            setAfternoonSlots(afternoonSlotsTemp);
            setLoading(false);
        };
    
        fetchAndGenerateTimeSlots();
    }, [selectedDay, appointmentDuration, selectedEmployee]);




const firebaseConfig = {
  apiKey: "AIzaSyBVo892hQ7CQSZR0MGsozc5mH7ZTt8xFUk",
  authDomain: "calendarv2-e6d72.firebaseapp.com",
  projectId: "calendarv2-e6d72",
  storageBucket: "calendarv2-e6d72.appspot.com",
  messagingSenderId: "172451789407",
  appId: "1:172451789407:web:8663f3beef8802a82739ea"
};